package com.yh.jiran.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yh.jiran.module.login.model.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "user_info".
*/
public class UserDao extends AbstractDao<User, Void> {

    public static final String TABLENAME = "user_info";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property PhoneNumber = new Property(2, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property HasName = new Property(3, boolean.class, "hasName", false, "HAS_NAME");
        public final static Property HasPortrait = new Property(4, boolean.class, "hasPortrait", false, "HAS_PORTRAIT");
        public final static Property InStar = new Property(5, boolean.class, "inStar", false, "IN_STAR");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"user_info\" (" + //
                "\"USER_ID\" TEXT UNIQUE ," + // 0: userId
                "\"USER_NAME\" TEXT UNIQUE ," + // 1: userName
                "\"PHONE_NUMBER\" TEXT," + // 2: phoneNumber
                "\"HAS_NAME\" INTEGER NOT NULL ," + // 3: hasName
                "\"HAS_PORTRAIT\" INTEGER NOT NULL ," + // 4: hasPortrait
                "\"IN_STAR\" INTEGER NOT NULL );"); // 5: inStar
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user_info\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(3, phoneNumber);
        }
        stmt.bindLong(4, entity.getHasName() ? 1L: 0L);
        stmt.bindLong(5, entity.getHasPortrait() ? 1L: 0L);
        stmt.bindLong(6, entity.getInStar() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(3, phoneNumber);
        }
        stmt.bindLong(4, entity.getHasName() ? 1L: 0L);
        stmt.bindLong(5, entity.getHasPortrait() ? 1L: 0L);
        stmt.bindLong(6, entity.getInStar() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phoneNumber
            cursor.getShort(offset + 3) != 0, // hasName
            cursor.getShort(offset + 4) != 0, // hasPortrait
            cursor.getShort(offset + 5) != 0 // inStar
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhoneNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHasName(cursor.getShort(offset + 3) != 0);
        entity.setHasPortrait(cursor.getShort(offset + 4) != 0);
        entity.setInStar(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(User entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(User entity) {
        return null;
    }

    @Override
    public boolean hasKey(User entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
