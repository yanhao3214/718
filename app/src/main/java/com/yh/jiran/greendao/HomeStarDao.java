package com.yh.jiran.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yh.jiran.module.home.model.entity.HomeStar;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "home_star".
*/
public class HomeStarDao extends AbstractDao<HomeStar, Long> {

    public static final String TABLENAME = "home_star";

    /**
     * Properties of entity HomeStar.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property StarId = new Property(0, long.class, "starId", true, "_id");
        public final static Property ImgUrl = new Property(1, String.class, "imgUrl", false, "IMG_URL");
        public final static Property IcUrl = new Property(2, String.class, "icUrl", false, "IC_URL");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
        public final static Property Owner = new Property(5, String.class, "owner", false, "OWNER");
        public final static Property HasNew = new Property(6, boolean.class, "hasNew", false, "HAS_NEW");
    }


    public HomeStarDao(DaoConfig config) {
        super(config);
    }
    
    public HomeStarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"home_star\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: starId
                "\"IMG_URL\" TEXT," + // 1: imgUrl
                "\"IC_URL\" TEXT," + // 2: icUrl
                "\"TITLE\" TEXT," + // 3: title
                "\"STATUS\" TEXT," + // 4: status
                "\"OWNER\" TEXT," + // 5: owner
                "\"HAS_NEW\" INTEGER NOT NULL );"); // 6: hasNew
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"home_star\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeStar entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStarId());
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(2, imgUrl);
        }
 
        String icUrl = entity.getIcUrl();
        if (icUrl != null) {
            stmt.bindString(3, icUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(6, owner);
        }
        stmt.bindLong(7, entity.getHasNew() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeStar entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStarId());
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(2, imgUrl);
        }
 
        String icUrl = entity.getIcUrl();
        if (icUrl != null) {
            stmt.bindString(3, icUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(6, owner);
        }
        stmt.bindLong(7, entity.getHasNew() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public HomeStar readEntity(Cursor cursor, int offset) {
        HomeStar entity = new HomeStar( //
            cursor.getLong(offset + 0), // starId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imgUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // icUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // owner
            cursor.getShort(offset + 6) != 0 // hasNew
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeStar entity, int offset) {
        entity.setStarId(cursor.getLong(offset + 0));
        entity.setImgUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIcUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOwner(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHasNew(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeStar entity, long rowId) {
        entity.setStarId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeStar entity) {
        if(entity != null) {
            return entity.getStarId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeStar entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
